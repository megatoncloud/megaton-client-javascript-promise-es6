/**
 * Megaton API
 * JSON API for the Megaton Cloud Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@megaton.cloud
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OAuthToken from '../model/OAuthToken';

/**
* OAuthTokens service.
* @module api/OAuthTokensApi
* @version 1.0.0
*/
export default class OAuthTokensApi {

    /**
    * Constructs a new OAuthTokensApi. 
    * @alias module:api/OAuthTokensApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create new token
     * Create a new OAuth2 token with email and password authentication
     * @param {String} grantType 
     * @param {String} username 
     * @param {String} password 
     * @param {String} scope 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OAuthToken} and HTTP response
     */
    createOAuthTokenWithHttpInfo(grantType, username, password, scope) {
      let postBody = null;

      // verify the required parameter 'grantType' is set
      if (grantType === undefined || grantType === null) {
        throw new Error("Missing the required parameter 'grantType' when calling createOAuthToken");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createOAuthToken");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling createOAuthToken");
      }

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling createOAuthToken");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'grant_type': grantType,
        'username': username,
        'password': password,
        'scope': scope
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = OAuthToken;

      return this.apiClient.callApi(
        '/v1/oauth2/tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create new token
     * Create a new OAuth2 token with email and password authentication
     * @param {String} grantType 
     * @param {String} username 
     * @param {String} password 
     * @param {String} scope 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OAuthToken}
     */
    createOAuthToken(grantType, username, password, scope) {
      return this.createOAuthTokenWithHttpInfo(grantType, username, password, scope)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
