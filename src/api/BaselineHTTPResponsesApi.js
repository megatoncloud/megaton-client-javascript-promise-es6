/**
 * Megaton API
 * JSON API for the Megaton Cloud Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@megaton.cloud
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPMessageHeader from '../model/HTTPMessageHeader';
import HTTPResponse from '../model/HTTPResponse';

/**
* BaselineHTTPResponses service.
* @module api/BaselineHTTPResponsesApi
* @version 1.0.0
*/
export default class BaselineHTTPResponsesApi {

    /**
    * Constructs a new BaselineHTTPResponsesApi. 
    * @alias module:api/BaselineHTTPResponsesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get baseline response body
     * Retrieve body for a specified HTTP response and baseline exeuction
     * @param {Number} useCaseId 
     * @param {Number} executionId 
     * @param {Number} responseId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getBaselineHttpResponseBodyWithHttpInfo(useCaseId, executionId, responseId) {
      let postBody = null;

      // verify the required parameter 'useCaseId' is set
      if (useCaseId === undefined || useCaseId === null) {
        throw new Error("Missing the required parameter 'useCaseId' when calling getBaselineHttpResponseBody");
      }

      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling getBaselineHttpResponseBody");
      }

      // verify the required parameter 'responseId' is set
      if (responseId === undefined || responseId === null) {
        throw new Error("Missing the required parameter 'responseId' when calling getBaselineHttpResponseBody");
      }


      let pathParams = {
        'useCaseId': useCaseId,
        'executionId': executionId,
        'responseId': responseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['password'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/tenants/me/use-cases/{useCaseId}/baseline-executions/{executionId}/http-responses/{responseId}/body', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get baseline response body
     * Retrieve body for a specified HTTP response and baseline exeuction
     * @param {Number} useCaseId 
     * @param {Number} executionId 
     * @param {Number} responseId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getBaselineHttpResponseBody(useCaseId, executionId, responseId) {
      return this.getBaselineHttpResponseBodyWithHttpInfo(useCaseId, executionId, responseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get baseline response headers
     * Retrieve headers for a specified HTTP response and baseline exeuction
     * @param {Number} useCaseId 
     * @param {Number} executionId 
     * @param {Number} responseId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/HTTPMessageHeader>} and HTTP response
     */
    getBaselineHttpResponseHeadersWithHttpInfo(useCaseId, executionId, responseId) {
      let postBody = null;

      // verify the required parameter 'useCaseId' is set
      if (useCaseId === undefined || useCaseId === null) {
        throw new Error("Missing the required parameter 'useCaseId' when calling getBaselineHttpResponseHeaders");
      }

      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling getBaselineHttpResponseHeaders");
      }

      // verify the required parameter 'responseId' is set
      if (responseId === undefined || responseId === null) {
        throw new Error("Missing the required parameter 'responseId' when calling getBaselineHttpResponseHeaders");
      }


      let pathParams = {
        'useCaseId': useCaseId,
        'executionId': executionId,
        'responseId': responseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['password'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HTTPMessageHeader];

      return this.apiClient.callApi(
        '/v1/tenants/me/use-cases/{useCaseId}/baseline-executions/{executionId}/http-responses/{responseId}/headers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get baseline response headers
     * Retrieve headers for a specified HTTP response and baseline exeuction
     * @param {Number} useCaseId 
     * @param {Number} executionId 
     * @param {Number} responseId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/HTTPMessageHeader>}
     */
    getBaselineHttpResponseHeaders(useCaseId, executionId, responseId) {
      return this.getBaselineHttpResponseHeadersWithHttpInfo(useCaseId, executionId, responseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get baseline responses
     * Retrieve HTTP responses for a specified baseline exeuction
     * @param {Number} useCaseId 
     * @param {Number} executionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/HTTPResponse>} and HTTP response
     */
    getBaselineHttpResponsesWithHttpInfo(useCaseId, executionId) {
      let postBody = null;

      // verify the required parameter 'useCaseId' is set
      if (useCaseId === undefined || useCaseId === null) {
        throw new Error("Missing the required parameter 'useCaseId' when calling getBaselineHttpResponses");
      }

      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling getBaselineHttpResponses");
      }


      let pathParams = {
        'useCaseId': useCaseId,
        'executionId': executionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['password'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HTTPResponse];

      return this.apiClient.callApi(
        '/v1/tenants/me/use-cases/{useCaseId}/baseline-executions/{executionId}/http-responses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get baseline responses
     * Retrieve HTTP responses for a specified baseline exeuction
     * @param {Number} useCaseId 
     * @param {Number} executionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/HTTPResponse>}
     */
    getBaselineHttpResponses(useCaseId, executionId) {
      return this.getBaselineHttpResponsesWithHttpInfo(useCaseId, executionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
