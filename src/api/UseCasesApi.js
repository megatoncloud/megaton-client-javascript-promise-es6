/**
 * Megaton API
 * JSON API for the Megaton Cloud Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@megaton.cloud
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UseCase from '../model/UseCase';
import UseCaseSpec from '../model/UseCaseSpec';

/**
* UseCases service.
* @module api/UseCasesApi
* @version 1.0.0
*/
export default class UseCasesApi {

    /**
    * Constructs a new UseCasesApi. 
    * @alias module:api/UseCasesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create use-case
     * Executes a new use-case for a specified tenant
     * @param {module:model/UseCaseSpec} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UseCase} and HTTP response
     */
    createUseCaseWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createUseCase");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['password'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UseCase;

      return this.apiClient.callApi(
        '/v1/tenants/me/use-cases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create use-case
     * Executes a new use-case for a specified tenant
     * @param {module:model/UseCaseSpec} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UseCase}
     */
    createUseCase(body) {
      return this.createUseCaseWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete use-case
     * Deletes a specified use-case
     * @param {Number} useCaseId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteUseCaseWithHttpInfo(useCaseId) {
      let postBody = null;

      // verify the required parameter 'useCaseId' is set
      if (useCaseId === undefined || useCaseId === null) {
        throw new Error("Missing the required parameter 'useCaseId' when calling deleteUseCase");
      }


      let pathParams = {
        'useCaseId': useCaseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['password'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/tenants/me/use-cases/{useCaseId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete use-case
     * Deletes a specified use-case
     * @param {Number} useCaseId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteUseCase(useCaseId) {
      return this.deleteUseCaseWithHttpInfo(useCaseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get use-case
     * Retrieve a specified use-case
     * @param {Number} useCaseId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UseCase} and HTTP response
     */
    getUseCaseWithHttpInfo(useCaseId) {
      let postBody = null;

      // verify the required parameter 'useCaseId' is set
      if (useCaseId === undefined || useCaseId === null) {
        throw new Error("Missing the required parameter 'useCaseId' when calling getUseCase");
      }


      let pathParams = {
        'useCaseId': useCaseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['password'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UseCase;

      return this.apiClient.callApi(
        '/v1/tenants/me/use-cases/{useCaseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get use-case
     * Retrieve a specified use-case
     * @param {Number} useCaseId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UseCase}
     */
    getUseCase(useCaseId) {
      return this.getUseCaseWithHttpInfo(useCaseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get use-cases
     * Retrieve all use-cases for a specified tenant
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/UseCase>} and HTTP response
     */
    getUseCasesWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['password'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [UseCase];

      return this.apiClient.callApi(
        '/v1/tenants/me/use-cases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get use-cases
     * Retrieve all use-cases for a specified tenant
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/UseCase>}
     */
    getUseCases() {
      return this.getUseCasesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
