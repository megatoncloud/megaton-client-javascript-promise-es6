/**
 * Megaton API
 * JSON API for the Megaton Cloud Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@megaton.cloud
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPMessageHeader from '../model/HTTPMessageHeader';
import HTTPScriptEntry from '../model/HTTPScriptEntry';

/**
* HTTPScript service.
* @module api/HTTPScriptApi
* @version 1.0.0
*/
export default class HTTPScriptApi {

    /**
    * Constructs a new HTTPScriptApi. 
    * @alias module:api/HTTPScriptApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get HTTP script
     * Retrieves HTTP script for a specified use-case
     * @param {Number} useCaseId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/HTTPScriptEntry>} and HTTP response
     */
    getHttpScriptWithHttpInfo(useCaseId) {
      let postBody = null;

      // verify the required parameter 'useCaseId' is set
      if (useCaseId === undefined || useCaseId === null) {
        throw new Error("Missing the required parameter 'useCaseId' when calling getHttpScript");
      }


      let pathParams = {
        'useCaseId': useCaseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['password'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HTTPScriptEntry];

      return this.apiClient.callApi(
        '/v1/tenants/me/use-cases/{useCaseId}/http-script', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get HTTP script
     * Retrieves HTTP script for a specified use-case
     * @param {Number} useCaseId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/HTTPScriptEntry>}
     */
    getHttpScript(useCaseId) {
      return this.getHttpScriptWithHttpInfo(useCaseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get HTTP script entry body
     * Retrieves body for a specified use-case and HTTP script entry
     * @param {Number} useCaseId 
     * @param {Number} entryId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getHttpScriptEntryBodyWithHttpInfo(useCaseId, entryId) {
      let postBody = null;

      // verify the required parameter 'useCaseId' is set
      if (useCaseId === undefined || useCaseId === null) {
        throw new Error("Missing the required parameter 'useCaseId' when calling getHttpScriptEntryBody");
      }

      // verify the required parameter 'entryId' is set
      if (entryId === undefined || entryId === null) {
        throw new Error("Missing the required parameter 'entryId' when calling getHttpScriptEntryBody");
      }


      let pathParams = {
        'useCaseId': useCaseId,
        'entryId': entryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['password'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/tenants/me/use-cases/{useCaseId}/http-script/{entryId}/body', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get HTTP script entry body
     * Retrieves body for a specified use-case and HTTP script entry
     * @param {Number} useCaseId 
     * @param {Number} entryId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getHttpScriptEntryBody(useCaseId, entryId) {
      return this.getHttpScriptEntryBodyWithHttpInfo(useCaseId, entryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get HTTP script entry headers
     * Retrieves headers for a specified use-case and HTTP script entry
     * @param {Number} useCaseId 
     * @param {Number} entryId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/HTTPMessageHeader>} and HTTP response
     */
    getHttpScriptEntryHeadersWithHttpInfo(useCaseId, entryId) {
      let postBody = null;

      // verify the required parameter 'useCaseId' is set
      if (useCaseId === undefined || useCaseId === null) {
        throw new Error("Missing the required parameter 'useCaseId' when calling getHttpScriptEntryHeaders");
      }

      // verify the required parameter 'entryId' is set
      if (entryId === undefined || entryId === null) {
        throw new Error("Missing the required parameter 'entryId' when calling getHttpScriptEntryHeaders");
      }


      let pathParams = {
        'useCaseId': useCaseId,
        'entryId': entryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['password'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HTTPMessageHeader];

      return this.apiClient.callApi(
        '/v1/tenants/me/use-cases/{useCaseId}/http-script/{entryId}/headers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get HTTP script entry headers
     * Retrieves headers for a specified use-case and HTTP script entry
     * @param {Number} useCaseId 
     * @param {Number} entryId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/HTTPMessageHeader>}
     */
    getHttpScriptEntryHeaders(useCaseId, entryId) {
      return this.getHttpScriptEntryHeadersWithHttpInfo(useCaseId, entryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
